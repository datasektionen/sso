package templates

import (
	"github.com/datasektionen/sso/models"
	"github.com/go-webauthn/webauthn/protocol"
	"github.com/google/uuid"
)

templ PasskeyLoginForm(kthid string, credAss *protocol.CredentialAssertion, sessionID uuid.UUID) {
	<form
		id="passkey-login-form"
		hx-post="/login/passkey/begin"
		_="on submit remove <.error/>"
		if credAss != nil {
			data-cred-ass={ templ.JSONString(credAss) }
		}
		data-session-id={ templ.JSONString(sessionID) }
		hx-swap="outerHTML"
		class="[&>.error]:bg-red-600/50 [&>.error]:p-2 [&>.error]:mt-2 [&>.error]:rounded"
	>
		if credAss != nil {
			<script type="module">
				let form = document.querySelector("#passkey-login-form");
				let credAss = JSON.parse(form.dataset.credAss);
				credAss.publicKey.challenge = decodebase64url(credAss.publicKey.challenge);
				if ("allowCredentials" in credAss.publicKey) {
					for (let ac of credAss.publicKey.allowCredentials) {
						ac.id = decodebase64url(ac.id);
					}
				}
				try {
					let cred = await navigator.credentials.get(credAss);
					let res = await fetch("/login/passkey/finish", {
						method: "post",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify({
							session: form.dataset.sessionId,
							cred: {
								id: cred.id,
								rawId: encodebase64url(cred.rawId),
								type: cred.type,
								authenticatorAttachment: cred.authenticatorAttachment,
								response: {
									authenticatorData: encodebase64url(cred.response.authenticatorData),
									clientDataJSON: encodebase64url(cred.response.clientDataJSON),
									signature: encodebase64url(cred.response.signature),
									userHandle: encodebase64url(cred.response.userHandle),
								},
							},
						}),
					});
					if (res.status == 200)
						window.location.replace("/");
					else
						throw new Error(await res.text());
				} catch (err) {
					let text = (err.name === "NotAllowedError")
						? "Missing permission or request was cancelled"
						: err.message;
					let el = document.createElement("p");
					el.classList.add("error");
					el.textContent = text;
					form.appendChild(el);
				} finally {
					form.querySelector("button").classList.remove("spinner");
				}
			</script>
		}
		<label class="text-sm" for="pk-kthid">
			Log in using a Passkey
			<i
				title="The first time you log in, you must use KTH. If you then go to your account settings you can add one or multiple passkeys.
If you registered your passkey after 2025-09-18, you don't need to provide your username."
				class="nf nf-cod-info"
			></i>
		</label>
		<div class="flex gap-2">
			<input
				id="pk-kthid"
				name="kthid"
				type="text"
				placeholder="KTH ID"
				value={ kthid }
				class="
					border border-neutral-500 grow
					outline-none focus:border-cerisestrong hover:border-ceriselight
					bg-slate-800 p-1.5 rounded h-8
				"
			/>
			<button
				id="pk-init"
				class={ `
					bg-[#3f4c66] shrink-0 h-8 w-8 rounded-full
					grid place-items-center pointer
					border border-transparent outline-none focus:border-cerisestrong hover:border-ceriselight relative
					nf nf-cod-key -scale-x-100
				`+bigIfTrue(credAss != nil, "spinner", "") }
			></button>
		</div>
	</form>
}

templ ShowPasskey(passkey models.Passkey) {
	<li class="flex p-1 gap-2 items-center">
		<span>{ passkey.Name }</span>
		<button
			class="
				bg-[#3f4c66] shrink-0 h-5 w-5 rounded-full
				grid place-items-center pointer
				border border-transparent outline-none focus:border-cerisestrong hover:border-ceriselight relative
				nf nf-oct-x
			"
			hx-delete={ "/passkey/" + passkey.ID.String() }
			hx-target="closest li"
			hx-swap="outerHTML"
		></button>
		if !passkey.Discoverable {
			<p title="This is not a discoverable key! If you re-create this passkey, you will be able to log in without filling in the username field!">☣️</p>
		}
	</li>
}

templ PasskeySettings(passkeys []models.Passkey) {
	<section class="flex flex-col max-w-lg">
		<h2 class="text-xl text-ceriselight">Passkeys:</h2>
		<ul id="passkey-list">
			for _, passkey := range passkeys {
				@ShowPasskey(passkey)
			}
		</ul>
		<button
			hx-get="/passkey/add-form"
			hx-swap="afterend"
			id="add-passkey-button"
			_="on htmx:afterSwap hide me"
			class="
				bg-[#3f4c66] p-1.5 block rounded border text-center
				select-none border-transparent outline-none
				focus:border-cerisestrong hover:border-ceriselight
				mt-1
			"
		>Add passkey</button>
	</section>
}

templ AddPasskeyForm(cc *protocol.CredentialCreation, sessionID uuid.UUID) {
	<form
		data-credential-creation={ templ.JSONString(cc) }
		data-session-id={ templ.JSONString(sessionID) }
		onsubmit="addPasskey(this, event)"
		class="[&>.error]:bg-red-600/50 [&>.error]:p-2 [&>.error]:mt-2 [&>.error]:rounded"
	>
		<script>
			async function addPasskey(form, event) {
				event.preventDefault();
				let cc = JSON.parse(form.dataset.credentialCreation);
				cc.publicKey.challenge = decodebase64url(cc.publicKey.challenge);
				cc.publicKey.user.id = decodebase64url(cc.publicKey.user.id);
				for (let err of form.querySelectorAll(".error"))
					err.remove();

				try {
					let cred = await navigator.credentials.create(await cc);
					let res = await fetch("/passkey", {
						method: "post",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify({
							name: new FormData(form).get("name"),
							session: form.dataset.sessionId,
							id: cred.id,
							type: cred.type,
							authenticatorAttachment: cred.authenticatorAttachment,
							response: {
								attestationObject: encodebase64url(cred.response.attestationObject),
								clientDataJSON: encodebase64url(cred.response.clientDataJSON),
							},
						}),
					});
					if (res.status != 200)
						throw new Error(await res.text());
					let key = await res.text();
					form.remove();
					htmx.swap("#passkey-list", key, { swapStyle: "beforeend" });
					document.querySelector("#add-passkey-button").style.display = "";
				} catch (err) {
					let text = (err.name === "NotAllowedError")
						? "Missing permission or request was cancelled"
						: err.message;
					let el = document.createElement("p");
					el.classList.add("error");
					el.textContent = text;
					form.appendChild(el);
				}
			}
		</script>
		<div class="flex gap-2">
			<input
				placeholder="passkey name"
				type="text"
				autofocus
				name="name"
				id="passkey-name"
				class="
					border border-neutral-500 grow
					outline-none focus:border-cerisestrong hover:border-ceriselight
					bg-slate-800 p-1.5 rounded h-8
				"
			/>
			<button
				class="
				bg-[#3f4c66] shrink-0 h-8 w-8 rounded-full
				grid place-items-center pointer
				border border-transparent outline-none focus:border-cerisestrong hover:border-ceriselight
				nf nf-oct-check
			"
			></button>
		</div>
	</form>
}
