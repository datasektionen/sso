package templates

import (
	"github.com/datasektionen/sso/pkg/config"
	"github.com/datasektionen/sso/pkg/static"
)

templ base() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>Datasektionen SSO</title>
			<link rel="stylesheet" href="/public/style.dist.css"/>
			<script src="https://unpkg.com/htmx.org@2.0.3" integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx-ext-sse@2.2.2/sse.js" integrity="sha384-fw+eTlCc7suMV/1w/7fr2/PmwElUIt5i82bi+qTiLXvjRXZ2/FkiTNA/w0MhXnGI" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.13" integrity="sha384-5yQ5JTatiFEgeiEB4mfkRI3oTGtaNpbJGdcciZ4IEYFpLGt8yDsGAd7tKiMwnX9b" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/idiomorph@0.3.0/dist/idiomorph-ext.min.js" integrity="sha384-01awMgY2Qxoo57dFZwehcB4wqi9TunC6fiF9hpPaDsLu+ayOG+WvoatvgPWquZh8" crossorigin="anonymous"></script>
			@base64Helpers()
			if config.Config.Dev {
				@devAutoReload()
			}
		</head>
		<body class="bg-gray-900 text-neutral-100" hx-ext="morph">
			{ children... }
		</body>
	</html>
}

templ page(navItems templ.Component) {
	@base() {
		<nav
			class="
				w-full h-12 bg-gray-700 flex uppercase
				overflow-auto
				[&>a:not(:first-child)]:flex [&>a]:items-center [&>a:not(:first-child)]:px-3 [&>a]:hover:bg-gray-600 [&>a]:transition-colors
				[&>a]:shrink-0
			"
		>
			<a href="/" class="h-full block aspect-square grid place-items-center fill-(--cerise-regular) bg-gray-600">
				@templ.Raw(static.PublicAsString("delta.svg"))
			</a>
			@navItems
		</nav>
		<div class="flex justify-center min-h-[calc(100vh-3rem)]">
			<main class="bg-gray-800 w-[1000px] md:max-w-[calc(100vw-8rem)]">
				{ children... }
			</main>
		</div>
	}
}

templ nav(includeAdmin bool) {
	<a href="/account">Account</a>
	if includeAdmin {
		@adminNav()
	}
	<a href="/logout">Log out</a>
}

templ modal() {
	@base() {
		<div class="grid place-items-center min-h-screen">
			<main class="bg-gray-800 rounded w-88 max-w-[calc(100vw-2rem)]">
				{ children... }
			</main>
		</div>
	}
}

var input = `
	border border-neutral-500 grow
	outline-none focus:border-(--cerise-strong) hover:border-(--cerise-light)
	bg-slate-800 p-1.5 rounded leading-tight
`

var button = `
	bg-[#3f4c66] p-1 leading-tight block rounded border text-center
	select-none border-transparent outline-none
	enabled:focus:border-(--cerise-strong) enabled:hover:border-(--cerise-light)
	disabled:text-gray-500
`

var roundButton = `
	bg-[#3f4c66] shrink-0 h-5 w-5 rounded-full
	grid place-items-center pointer
	border border-transparent outline-none focus:border-(--cerise-strong) hover:border-(--cerise-light) relative
	[&>img]:w-3/5 [&>img]:h-3/5 [&>img]:invert
	[&>p]:text-center [&>p]:leading-none
`

var selectStyle = `
	border border-neutral-500
	outline-none focus:border-(--cerise-strong) hover:border-(--cerise-light)
	bg-slate-800 p-1.5 rounded leading-tight
`

templ radioButton(attrs templ.Attributes) {
	<label>
		<div
			class="
				w-4 h-4 bg-slate-800 border border-neutral-500
				rounded-full cursor-pointer relative inline-block
				has-[:checked]:border-(--cerise-strong) hover:border-(--cerise-light)
				mr-1
			"
		>
			<input
				type="radio"
				class="absolute opacity-0 pointer-events-none peer h-4 w-4"
				{ attrs ... }
			/>
			<span
				class="
					peer-checked:bg-(--cerise-light)
					absolute inset-0.5
					flex rounded-full
				"
			></span>
		</div>
		{ children... }
	</label>
}

templ base64Helpers() {
	<script>
/**
 * @param {string} data
 * @returns Uint8Array
 */
let decodebase64url = (data) =>
    Uint8Array.from(window.atob(data.replace(/-/g, "+").replace(/_/g, "/")), v => v.charCodeAt(0));
/**
 * @param {Uint8Array} data
 * @returns string
 */
let encodebase64url = (data) =>
    base64ArrayBuffer(data).replace(/\+/g, "-").replace(/\//g, "_");

// Taken from https://gist.github.com/jonleighton/958841 and slightly modified.
/*
MIT LICENSE
Copyright 2011 Jon Leighton
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**
 * @param {ArrayBuffer} arrayBuffer
 */
function base64ArrayBuffer(arrayBuffer) {
    let base64 = "";
    let encodings = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    let bytes = new Uint8Array(arrayBuffer);
    let byteLength = bytes.byteLength;
    let byteRemainder = byteLength % 3;
    let mainLength = byteLength - byteRemainder;

    // Main loop deals with bytes in chunks of 3
    for (let i = 0; i < mainLength; i = i + 3) {
        // Combine the three bytes into a single integer
        let chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];

        // Use bitmasks to extract 6-bit segments from the triplet
        let a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
        let b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12
        let c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6
        let d = chunk & 63;               // 63       = 2^6 - 1

        // Convert the raw binary segments to the appropriate ASCII encoding
        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
    }

    // Deal with the remaining bytes and padding
    if (byteRemainder == 1) {
        let chunk = bytes[mainLength];

        let a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2

        // Set the 4 least significant bits to zero
        let b = (chunk & 3) << 4; // 3   = 2^2 - 1

        base64 += encodings[a] + encodings[b] + '==';
    } else if (byteRemainder == 2) {
        let chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];

        let a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
        let b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4

        // Set the 2 least significant bits to zero
        let c = (chunk & 15) << 2; // 15    = 2^4 - 1

        base64 += encodings[a] + encodings[b] + encodings[c] + '=';
    }

    return base64;
}
	</script>
}
