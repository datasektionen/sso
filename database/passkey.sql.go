// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: passkey.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addPasskey = `-- name: AddPasskey :one
insert into passkeys (kthid, name, data, discoverable)
values ($1, $2, $3, $4)
returning id
`

type AddPasskeyParams struct {
	Kthid        string
	Name         string
	Data         []byte
	Discoverable bool
}

func (q *Queries) AddPasskey(ctx context.Context, arg AddPasskeyParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, addPasskey,
		arg.Kthid,
		arg.Name,
		arg.Data,
		arg.Discoverable,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPasskey = `-- name: GetPasskey :one
select id, name, kthid, data, discoverable
from passkeys
where kthid = $1 and decode(data->>'id', 'base64') = $2
`

type GetPasskeyParams struct {
	Kthid string
	ID    []byte
}

func (q *Queries) GetPasskey(ctx context.Context, arg GetPasskeyParams) (Passkey, error) {
	row := q.db.QueryRow(ctx, getPasskey, arg.Kthid, arg.ID)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Kthid,
		&i.Data,
		&i.Discoverable,
	)
	return i, err
}

const listPasskeysByUser = `-- name: ListPasskeysByUser :many
select id, name, kthid, data, discoverable
from passkeys
where kthid = $1
`

func (q *Queries) ListPasskeysByUser(ctx context.Context, kthid string) ([]Passkey, error) {
	rows, err := q.db.Query(ctx, listPasskeysByUser, kthid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passkey
	for rows.Next() {
		var i Passkey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Kthid,
			&i.Data,
			&i.Discoverable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePasskey = `-- name: RemovePasskey :exec
delete from passkeys
where kthid = $1 and id = $2
`

type RemovePasskeyParams struct {
	Kthid string
	ID    uuid.UUID
}

func (q *Queries) RemovePasskey(ctx context.Context, arg RemovePasskeyParams) error {
	_, err := q.db.Exec(ctx, removePasskey, arg.Kthid, arg.ID)
	return err
}

const storeWebAuthnSessionData = `-- name: StoreWebAuthnSessionData :one
insert into webauthn_session_data (data, kthid)
values ($1, $2)
returning id
`

type StoreWebAuthnSessionDataParams struct {
	Data  []byte
	Kthid string
}

func (q *Queries) StoreWebAuthnSessionData(ctx context.Context, arg StoreWebAuthnSessionDataParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, storeWebAuthnSessionData, arg.Data, arg.Kthid)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const takeWebAuthnSessionData = `-- name: TakeWebAuthnSessionData :one
delete from webauthn_session_data
where id = $1
returning data, kthid
`

type TakeWebAuthnSessionDataRow struct {
	Data  []byte
	Kthid string
}

func (q *Queries) TakeWebAuthnSessionData(ctx context.Context, id uuid.UUID) (TakeWebAuthnSessionDataRow, error) {
	row := q.db.QueryRow(ctx, takeWebAuthnSessionData, id)
	var i TakeWebAuthnSessionDataRow
	err := row.Scan(&i.Data, &i.Kthid)
	return i, err
}
