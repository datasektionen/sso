// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: invite.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createInvite = `-- name: CreateInvite :one
insert into invites (
    name,
    expires_at,
    max_uses
)
values ($1, $2, $3)
returning id, name, created_at, expires_at, max_uses, current_uses
`

type CreateInviteParams struct {
	Name      string
	ExpiresAt pgtype.Timestamp
	MaxUses   pgtype.Int4
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (Invite, error) {
	row := q.db.QueryRow(ctx, createInvite, arg.Name, arg.ExpiresAt, arg.MaxUses)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.MaxUses,
		&i.CurrentUses,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec
delete from invites
where id = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteInvite, id)
	return err
}

const getInvite = `-- name: GetInvite :one
select id, name, created_at, expires_at, max_uses, current_uses
from invites
where id = $1
`

func (q *Queries) GetInvite(ctx context.Context, id uuid.UUID) (Invite, error) {
	row := q.db.QueryRow(ctx, getInvite, id)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.MaxUses,
		&i.CurrentUses,
	)
	return i, err
}

const incrementInviteUses = `-- name: IncrementInviteUses :exec
update invites
set current_uses = current_uses + 1
where id = $1
`

func (q *Queries) IncrementInviteUses(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementInviteUses, id)
	return err
}

const listInvites = `-- name: ListInvites :many
select id, name, created_at, expires_at, max_uses, current_uses
from invites
order by created_at
`

func (q *Queries) ListInvites(ctx context.Context) ([]Invite, error) {
	rows, err := q.db.Query(ctx, listInvites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.MaxUses,
			&i.CurrentUses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvite = `-- name: UpdateInvite :one
update invites
set name = $2, expires_at = $3, max_uses = $4
where id = $1
returning id, name, created_at, expires_at, max_uses, current_uses
`

type UpdateInviteParams struct {
	ID        uuid.UUID
	Name      string
	ExpiresAt pgtype.Timestamp
	MaxUses   pgtype.Int4
}

func (q *Queries) UpdateInvite(ctx context.Context, arg UpdateInviteParams) (Invite, error) {
	row := q.db.QueryRow(ctx, updateInvite,
		arg.ID,
		arg.Name,
		arg.ExpiresAt,
		arg.MaxUses,
	)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.MaxUses,
		&i.CurrentUses,
	)
	return i, err
}
