// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountRequest = `-- name: CreateAccountRequest :one
insert into account_requests (reference, reason, year_tag)
values ($1, $2, $3)
returning id
`

type CreateAccountRequestParams struct {
	Reference string
	Reason    string
	YearTag   string
}

func (q *Queries) CreateAccountRequest(ctx context.Context, arg CreateAccountRequestParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccountRequest, arg.Reference, arg.Reason, arg.YearTag)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createSession = `-- name: CreateSession :one
insert into sessions (kthid)
values ($1)
returning id
`

func (q *Queries) CreateSession(ctx context.Context, kthid string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSession, kthid)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :exec
insert into users (
    kthid,
    ug_kthid,
    email,
    first_name,
    family_name,
    year_tag,
    member_to
)
values ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	Kthid      string
	UgKthid    string
	Email      string
	FirstName  string
	FamilyName string
	YearTag    string
	MemberTo   pgtype.Date
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Kthid,
		arg.UgKthid,
		arg.Email,
		arg.FirstName,
		arg.FamilyName,
		arg.YearTag,
		arg.MemberTo,
	)
	return err
}

const deleteAccountRequest = `-- name: DeleteAccountRequest :one
delete from account_requests
where id = $1
returning id, created_at, reference, reason, year_tag, kthid
`

func (q *Queries) DeleteAccountRequest(ctx context.Context, id uuid.UUID) (AccountRequest, error) {
	row := q.db.QueryRow(ctx, deleteAccountRequest, id)
	var i AccountRequest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Reference,
		&i.Reason,
		&i.YearTag,
		&i.Kthid,
	)
	return i, err
}

const finishAccountRequestKTH = `-- name: FinishAccountRequestKTH :exec
update account_requests
set kthid = $2
where id = $1
`

type FinishAccountRequestKTHParams struct {
	ID    uuid.UUID
	Kthid pgtype.Text
}

func (q *Queries) FinishAccountRequestKTH(ctx context.Context, arg FinishAccountRequestKTHParams) error {
	_, err := q.db.Exec(ctx, finishAccountRequestKTH, arg.ID, arg.Kthid)
	return err
}

const getAllYears = `-- name: GetAllYears :many
select distinct year_tag
from users
where year_tag != ''
order by year_tag
`

func (q *Queries) GetAllYears(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllYears)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var year_tag string
		if err := rows.Scan(&year_tag); err != nil {
			return nil, err
		}
		items = append(items, year_tag)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastSheetUploadTime = `-- name: GetLastSheetUploadTime :one
select uploaded_at
from last_membership_sheet
`

func (q *Queries) GetLastSheetUploadTime(ctx context.Context) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, getLastSheetUploadTime)
	var uploaded_at pgtype.Timestamp
	err := row.Scan(&uploaded_at)
	return uploaded_at, err
}

const getSession = `-- name: GetSession :one
update sessions
set last_used_at = now()
where id = $1
and last_used_at > now() - interval '8 hours'
returning kthid
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var kthid string
	err := row.Scan(&kthid)
	return kthid, err
}

const getUser = `-- name: GetUser :one
select kthid, ug_kthid, email, first_name, family_name, year_tag, member_to, webauthn_id, first_name_change_request, family_name_change_request
from users
where kthid = $1
`

func (q *Queries) GetUser(ctx context.Context, kthid string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, kthid)
	var i User
	err := row.Scan(
		&i.Kthid,
		&i.UgKthid,
		&i.Email,
		&i.FirstName,
		&i.FamilyName,
		&i.YearTag,
		&i.MemberTo,
		&i.WebauthnID,
		&i.FirstNameChangeRequest,
		&i.FamilyNameChangeRequest,
	)
	return i, err
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
select kthid, ug_kthid, email, first_name, family_name, year_tag, member_to, webauthn_id, first_name_change_request, family_name_change_request
from users
where kthid = any($1::text[])
`

func (q *Queries) GetUsersByIDs(ctx context.Context, ids []string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Kthid,
			&i.UgKthid,
			&i.Email,
			&i.FirstName,
			&i.FamilyName,
			&i.YearTag,
			&i.MemberTo,
			&i.WebauthnID,
			&i.FirstNameChangeRequest,
			&i.FamilyNameChangeRequest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountRequests = `-- name: ListAccountRequests :many
select id, created_at, reference, reason, year_tag, kthid
from account_requests
order by created_at
`

func (q *Queries) ListAccountRequests(ctx context.Context) ([]AccountRequest, error) {
	rows, err := q.db.Query(ctx, listAccountRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountRequest
	for rows.Next() {
		var i AccountRequest
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Reference,
			&i.Reason,
			&i.YearTag,
			&i.Kthid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
select kthid, ug_kthid, email, first_name, family_name, year_tag, member_to, webauthn_id, first_name_change_request, family_name_change_request
from users
where case
    when $3::text = '' then true
    else kthid = $3
      or first_name ~* $3
      or family_name ~* $3
      or first_name || ' ' || family_name ~* $3
end
and case
    when $4::text = '' then true
    else $4 = year_tag
end
order by kthid
limit $1
offset $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
	Search string
	Year   string
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.Search,
		arg.Year,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Kthid,
			&i.UgKthid,
			&i.Email,
			&i.FirstName,
			&i.FamilyName,
			&i.YearTag,
			&i.MemberTo,
			&i.WebauthnID,
			&i.FirstNameChangeRequest,
			&i.FamilyNameChangeRequest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSheetUploadedNow = `-- name: MarkSheetUploadedNow :exec
insert into last_membership_sheet (uploaded_at)
values (now())
on conflict (unique_marker)
do update
set uploaded_at = now()
`

func (q *Queries) MarkSheetUploadedNow(ctx context.Context) error {
	_, err := q.db.Exec(ctx, markSheetUploadedNow)
	return err
}

const removeSession = `-- name: RemoveSession :exec
delete from sessions
where id = $1
`

func (q *Queries) RemoveSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeSession, id)
	return err
}

const userSetMemberTo = `-- name: UserSetMemberTo :exec
update users
set member_to = $2
where kthid = $1
`

type UserSetMemberToParams struct {
	Kthid    string
	MemberTo pgtype.Date
}

func (q *Queries) UserSetMemberTo(ctx context.Context, arg UserSetMemberToParams) error {
	_, err := q.db.Exec(ctx, userSetMemberTo, arg.Kthid, arg.MemberTo)
	return err
}

const userSetNameChangeRequest = `-- name: UserSetNameChangeRequest :one
update users
set first_name_change_request = $2,
    family_name_change_request = $3
where kthid = $1
returning kthid, ug_kthid, email, first_name, family_name, year_tag, member_to, webauthn_id, first_name_change_request, family_name_change_request
`

type UserSetNameChangeRequestParams struct {
	Kthid                   string
	FirstNameChangeRequest  string
	FamilyNameChangeRequest string
}

func (q *Queries) UserSetNameChangeRequest(ctx context.Context, arg UserSetNameChangeRequestParams) (User, error) {
	row := q.db.QueryRow(ctx, userSetNameChangeRequest, arg.Kthid, arg.FirstNameChangeRequest, arg.FamilyNameChangeRequest)
	var i User
	err := row.Scan(
		&i.Kthid,
		&i.UgKthid,
		&i.Email,
		&i.FirstName,
		&i.FamilyName,
		&i.YearTag,
		&i.MemberTo,
		&i.WebauthnID,
		&i.FirstNameChangeRequest,
		&i.FamilyNameChangeRequest,
	)
	return i, err
}

const userSetYear = `-- name: UserSetYear :one
update users
set year_tag = coalesce($2, year_tag)
where kthid = $1
returning kthid, ug_kthid, email, first_name, family_name, year_tag, member_to, webauthn_id, first_name_change_request, family_name_change_request
`

type UserSetYearParams struct {
	Kthid   string
	YearTag string
}

func (q *Queries) UserSetYear(ctx context.Context, arg UserSetYearParams) (User, error) {
	row := q.db.QueryRow(ctx, userSetYear, arg.Kthid, arg.YearTag)
	var i User
	err := row.Scan(
		&i.Kthid,
		&i.UgKthid,
		&i.Email,
		&i.FirstName,
		&i.FamilyName,
		&i.YearTag,
		&i.MemberTo,
		&i.WebauthnID,
		&i.FirstNameChangeRequest,
		&i.FamilyNameChangeRequest,
	)
	return i, err
}
