// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: passkey.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addPasskey = `-- name: AddPasskey :one
insert into passkeys (kthid, name, data)
values ($1, $2, $3)
returning id
`

type AddPasskeyParams struct {
	Kthid string
	Name  string
	Data  string
}

func (q *Queries) AddPasskey(ctx context.Context, arg AddPasskeyParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, addPasskey, arg.Kthid, arg.Name, arg.Data)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listPasskeysByUser = `-- name: ListPasskeysByUser :many
select id, name, kthid, data
from passkeys
where kthid = $1
`

func (q *Queries) ListPasskeysByUser(ctx context.Context, kthid string) ([]Passkey, error) {
	rows, err := q.db.Query(ctx, listPasskeysByUser, kthid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passkey
	for rows.Next() {
		var i Passkey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Kthid,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePasskey = `-- name: RemovePasskey :exec
delete from passkeys
where kthid = $1 and id = $2
`

type RemovePasskeyParams struct {
	Kthid string
	ID    uuid.UUID
}

func (q *Queries) RemovePasskey(ctx context.Context, arg RemovePasskeyParams) error {
	_, err := q.db.Exec(ctx, removePasskey, arg.Kthid, arg.ID)
	return err
}

const storeWebAuthnSessionData = `-- name: StoreWebAuthnSessionData :exec
insert into webauthn_session_data (kthid, data)
values ($1, $2)
on conflict (kthid)
do update set data = $2
`

type StoreWebAuthnSessionDataParams struct {
	Kthid string
	Data  []byte
}

func (q *Queries) StoreWebAuthnSessionData(ctx context.Context, arg StoreWebAuthnSessionDataParams) error {
	_, err := q.db.Exec(ctx, storeWebAuthnSessionData, arg.Kthid, arg.Data)
	return err
}

const takeWebAuthnSessionData = `-- name: TakeWebAuthnSessionData :one
delete from webauthn_session_data
where kthid = $1
returning data
`

func (q *Queries) TakeWebAuthnSessionData(ctx context.Context, kthid string) ([]byte, error) {
	row := q.db.QueryRow(ctx, takeWebAuthnSessionData, kthid)
	var data []byte
	err := row.Scan(&data)
	return data, err
}
