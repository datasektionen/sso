// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: legacyapi.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
insert into legacyapi_tokens (kthid)
values ($1)
on conflict (kthid)
do update
set last_used_at = now()
returning id
`

func (q *Queries) CreateToken(ctx context.Context, kthid string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createToken, kthid)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteToken = `-- name: DeleteToken :exec
delete from legacyapi_tokens
where kthid = $1
`

func (q *Queries) DeleteToken(ctx context.Context, kthid string) error {
	_, err := q.db.Exec(ctx, deleteToken, kthid)
	return err
}

const getToken = `-- name: GetToken :one
update legacyapi_tokens
set last_used_at = now()
where id = $1 and last_used_at > now() - interval '8 hours'
returning kthid
`

func (q *Queries) GetToken(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getToken, id)
	var kthid string
	err := row.Scan(&kthid)
	return kthid, err
}
