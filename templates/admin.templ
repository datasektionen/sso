package templates

import (
	"fmt"
	"github.com/datasektionen/sso/models"
	"github.com/datasektionen/sso/pkg/hive"
	"time"
)

templ adminNav() {
	{{ perms := ctx.Value(hive.PermissionsCtxKey{}).(hive.Permissions) }}
	if perms.ReadMembers {
		<a href="/admin/members">Members</a>
	}
	if perms.ReadOIDCClients {
		<a href="/admin/oidc-clients">OIDC Clients</a>
	}
	if perms.ReadInvites {
		<a href="/admin/invites">Invites</a>
	}
	if perms.ReadAccountRequests {
		<a href="/admin/account-requests">Account Requests</a>
	}
}

templ AdminPage() {
	@page(nav()) {
		{ children... }
	}
}

templ Members(lastUpdatedAt time.Time) {
	{{ perms := ctx.Value(hive.PermissionsCtxKey{}).(hive.Permissions) }}
	@AdminPage() {
		<div class="p-8">
			<section hx-get="/admin/users" hx-trigger="load" hx-swap="morph:innerHTML">
				@MemberList([]models.User{}, "", 0, false, []string{}, "")
			</section>
			if perms.WriteMembers {
				@uploadForm(lastUpdatedAt)
				@UploadStatus(false)
			}
		</div>
	}
}

templ MemberList(users []models.User, search string, offset int, more bool, years []string, selectedYear string) {
	<div class="grid grid-cols-[repeat(4,auto)] gap-x-2 *:h-7">
		<div class="grid grid-cols-subgrid col-span-full">
			<span>Username</span>
			<span>Name</span>
			<span>Year</span>
			<span>Member until</span>
		</div>
		for _, user := range users {
			<div class="grid grid-cols-subgrid col-span-full">
				<span>{ user.KTHID }</span>
				<span>{ user.FirstName } { user.FamilyName }</span>
				<span>{ user.YearTag }</span>
				<span>
					if user.MemberTo != (time.Time{}) {
						{ user.MemberTo.Format(time.DateOnly) }
					}
				</span>
			</div>
		}
		for i := len(users); i < 20; i++ {
			<div class="grid grid-cols-subgrid col-span-full"></div>
		}
	</div>
	<div class="flex gap-2 pt-2" hx-target="closest section">
		<input
			hx-get="/admin/users"
			type="text"
			name="search"
			placeholder="Search..."
			class={ input }
			value={ search }
			if search != "" {
				autofocus
			}
		/>
		<select
			hx-get="/admin/users"
			name="year"
			hx-include='input[name="search"]'
			class={ selectStyle }
		>
			<option value="">Year</option>
			for _, year := range years {
				<option
					if year == selectedYear {
						selected
					}
				>{ year }</option>
			}
		</select>
		<button
			hx-get="/admin/users"
			class={ button }
			hx-vals={ templ.JSONString(map[string]any{"offset": max(0, offset-20)}) }
			hx-include='input[name="search"], select[name="year"]'
			if offset == 0 {
				disabled
			}
		>prev</button>
		<button
			hx-get="/admin/users"
			class={ button }
			hx-vals={ templ.JSONString(map[string]any{"offset": offset + 20}) }
			hx-include='input[name="search"], select[name="year"]'
			if !more {
				disabled
			}
		>next</button>
	</div>
}

templ uploadForm(lastUpdatedAt time.Time) {
	<form
		class="py-2 flex gap-2 items-center"
		hx-post="/admin/members/upload-sheet"
		hx-encoding="multipart/form-data"
		hx-swap="outerHTML"
		hx-target="#upload-status"
	>
		<p class="shrink-0">Upload THS membership sheet. Last upload at { lastUpdatedAt.Format(time.DateOnly) }</p>
		<input
			name="sheet"
			type="file"
			required
			class="
				bg-[#3f4c66] rounded p-1 grid place-items-center pointer w-full
				border border-transparent outline-none focus:border-cerisestrong hover:border-ceriselight relative
			"
		/>
		<button
			class={ button + "h-auto" }
		>Upload</button>
	</form>
}

templ UploadStatus(withStuff bool) {
	if withStuff {
		<div
			id="upload-status"
			class="w-full"
			hx-ext="sse"
			sse-connect="/admin/members/upload-sheet"
		>
			<div sse-swap="progress" hx-swap="innerHTML" class="w-full h-1 bg-white"></div>
			<div class="flex flex-col gap-2 pt-2" sse-swap="message" hx-swap="beforeend"></div>
		</div>
	} else {
		<div id="upload-status"></div>
	}
}

templ UploadProgress(progress float64) {
	<div class="bg-ceriseregular h-full" { templ.Attributes{"style": fmt.Sprint("width: ", progress * 100, "%")}... }></div>
}

templ UploadMessage(message string, isErr bool) {
	<p class={ "p-2 rounded " + bigIfTrue(isErr, "bg-red-600/50", "bg-green-600/50") }>{ message }</p>
}
