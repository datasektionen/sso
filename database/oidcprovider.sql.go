// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: oidcprovider.sql

package database

import (
	"context"
)

const createClient = `-- name: CreateClient :one
insert into oidc_clients (id, secret_hash, redirect_uris, hive_system_id)
values ($1, $2, '{}', $1)
returning secret_hash, redirect_uris, id, hive_system_id, last_used_at
`

type CreateClientParams struct {
	ID         string
	SecretHash []byte
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (OidcClient, error) {
	row := q.db.QueryRow(ctx, createClient, arg.ID, arg.SecretHash)
	var i OidcClient
	err := row.Scan(
		&i.SecretHash,
		&i.RedirectUris,
		&i.ID,
		&i.HiveSystemID,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
delete from oidc_clients
where id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
select secret_hash, redirect_uris, id, hive_system_id, last_used_at
from oidc_clients
where id = $1
`

func (q *Queries) GetClient(ctx context.Context, id string) (OidcClient, error) {
	row := q.db.QueryRow(ctx, getClient, id)
	var i OidcClient
	err := row.Scan(
		&i.SecretHash,
		&i.RedirectUris,
		&i.ID,
		&i.HiveSystemID,
		&i.LastUsedAt,
	)
	return i, err
}

const getClientUpdateLastUse = `-- name: GetClientUpdateLastUse :one
update oidc_clients
set last_used_at = now()
where id = $1
returning secret_hash, redirect_uris, id, hive_system_id, last_used_at
`

func (q *Queries) GetClientUpdateLastUse(ctx context.Context, id string) (OidcClient, error) {
	row := q.db.QueryRow(ctx, getClientUpdateLastUse, id)
	var i OidcClient
	err := row.Scan(
		&i.SecretHash,
		&i.RedirectUris,
		&i.ID,
		&i.HiveSystemID,
		&i.LastUsedAt,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
select secret_hash, redirect_uris, id, hive_system_id, last_used_at
from oidc_clients
`

func (q *Queries) ListClients(ctx context.Context) ([]OidcClient, error) {
	rows, err := q.db.Query(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OidcClient
	for rows.Next() {
		var i OidcClient
		if err := rows.Scan(
			&i.SecretHash,
			&i.RedirectUris,
			&i.ID,
			&i.HiveSystemID,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClientHiveSystemID = `-- name: UpdateClientHiveSystemID :one
update oidc_clients
set hive_system_id = $2
where id = $1
returning secret_hash, redirect_uris, id, hive_system_id, last_used_at
`

type UpdateClientHiveSystemIDParams struct {
	ID           string
	HiveSystemID string
}

func (q *Queries) UpdateClientHiveSystemID(ctx context.Context, arg UpdateClientHiveSystemIDParams) (OidcClient, error) {
	row := q.db.QueryRow(ctx, updateClientHiveSystemID, arg.ID, arg.HiveSystemID)
	var i OidcClient
	err := row.Scan(
		&i.SecretHash,
		&i.RedirectUris,
		&i.ID,
		&i.HiveSystemID,
		&i.LastUsedAt,
	)
	return i, err
}

const updateClientRedirectURIs = `-- name: UpdateClientRedirectURIs :one
update oidc_clients
set redirect_uris = $2
where id = $1
returning secret_hash, redirect_uris, id, hive_system_id, last_used_at
`

type UpdateClientRedirectURIsParams struct {
	ID           string
	RedirectUris []string
}

func (q *Queries) UpdateClientRedirectURIs(ctx context.Context, arg UpdateClientRedirectURIsParams) (OidcClient, error) {
	row := q.db.QueryRow(ctx, updateClientRedirectURIs, arg.ID, arg.RedirectUris)
	var i OidcClient
	err := row.Scan(
		&i.SecretHash,
		&i.RedirectUris,
		&i.ID,
		&i.HiveSystemID,
		&i.LastUsedAt,
	)
	return i, err
}
